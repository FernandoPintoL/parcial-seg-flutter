// Script de prueba para funcionalidades en JavaScript puro
// Basado en el ejemplo proporcionado

console.log('üß™ Probando funcionalidades en JavaScript puro...');

// Funci√≥n para verificar el sistema de arrastre
function testPureJavaScriptDrag() {
    console.log('üñ±Ô∏è Probando sistema de arrastre en JavaScript puro...');
    
    const elements = document.querySelectorAll('.unified-widget-element');
    if (elements.length === 0) {
        console.log('‚ùå No hay elementos para probar');
        return;
    }
    
    const element = elements[0];
    const elementId = element.dataset.elementId;
    
    console.log('üéØ Elemento seleccionado para prueba:', elementId);
    
    // Verificar que el elemento tiene los event listeners correctos
    const hasMouseDown = element.onmousedown !== null || 
                        element.getAttribute('data-has-mousedown') === 'true';
    
    console.log('üìä Event listeners verificados:');
    console.log(`   - MouseDown: ${hasMouseDown ? '‚úÖ' : '‚ùå'}`);
    
    // Simular mousedown
    const rect = element.getBoundingClientRect();
    const startX = rect.left + 50;
    const startY = rect.top + 25;
    
    console.log('üìç Posici√≥n inicial:', { x: rect.left, y: rect.top });
    
    const mousedownEvent = new MouseEvent('mousedown', {
        bubbles: true,
        cancelable: true,
        view: window,
        clientX: startX,
        clientY: startY
    });
    
    element.dispatchEvent(mousedownEvent);
    
    // Verificar estado despu√©s del mousedown
    setTimeout(() => {
        const isDragging = element.classList.contains('is-dragging');
        console.log(`   - Estado despu√©s del mousedown: ${isDragging ? 'arrastrando' : 'no arrastrando'}`);
        
        if (isDragging) {
            console.log('‚úÖ Sistema de arrastre funcionando correctamente');
            
            // Simular mousemove
            const mousemoveEvent = new MouseEvent('mousemove', {
                bubbles: true,
                cancelable: true,
                view: window,
                clientX: startX + 100,
                clientY: startY + 50
            });
            
            document.dispatchEvent(mousemoveEvent);
            
            // Verificar posici√≥n durante el arrastre
            setTimeout(() => {
                const newRect = element.getBoundingClientRect();
                console.log('üìç Posici√≥n durante arrastre:', { x: newRect.left, y: newRect.top });
                
                const moved = newRect.left !== rect.left || newRect.top !== rect.top;
                console.log(`‚úÖ Elemento ${moved ? 'se movi√≥' : 'NO se movi√≥'}`);
                
                // Simular mouseup
                const mouseupEvent = new MouseEvent('mouseup', {
                    bubbles: true,
                    cancelable: true,
                    view: window
                });
                
                document.dispatchEvent(mouseupEvent);
                
                // Verificar posici√≥n final
                setTimeout(() => {
                    const finalRect = element.getBoundingClientRect();
                    console.log('üìç Posici√≥n final:', { x: finalRect.left, y: finalRect.top });
                    
                    const finalMoved = finalRect.left !== rect.left || finalRect.top !== rect.top;
                    console.log(`‚úÖ Elemento ${finalMoved ? 'se movi√≥ finalmente' : 'NO se movi√≥ finalmente'}`);
                    
                    // Verificar persistencia
                    setTimeout(() => {
                        const persistentRect = element.getBoundingClientRect();
                        const persisted = persistentRect.left === finalRect.left && persistentRect.top === finalRect.top;
                        console.log(`‚úÖ Posici√≥n ${persisted ? 'persisti√≥' : 'NO persisti√≥'}`);
                        
                        if (persisted) {
                            console.log('üéâ √âXITO: Sistema de arrastre en JavaScript puro funciona correctamente');
                        } else {
                            console.log('‚ùå PROBLEMA: El elemento volvi√≥ a su posici√≥n original');
                        }
                    }, 1000);
                }, 100);
            }, 100);
        } else {
            console.log('‚ùå PROBLEMA: El elemento no entr√≥ en estado de arrastre');
        }
    }, 100);
}

// Funci√≥n para probar la creaci√≥n de widgets
function testWidgetCreation() {
    console.log('üÜï Probando creaci√≥n de widgets...');
    
    // Simular evento de creaci√≥n de widget
    const createWidgetEvent = new CustomEvent('create-widget', {
        detail: {
            widgetType: 'ElevatedButton',
            x: 100,
            y: 100
        }
    });
    
    document.dispatchEvent(createWidgetEvent);
    
    console.log('‚úÖ Evento de creaci√≥n de widget enviado');
    
    // Verificar si se cre√≥ el widget despu√©s de un delay
    setTimeout(() => {
        const newElements = document.querySelectorAll('.unified-widget-element');
        console.log(`üìä Elementos despu√©s de crear widget: ${newElements.length}`);
        
        // Buscar el widget reci√©n creado
        const newWidget = Array.from(newElements).find(el => {
            const rect = el.getBoundingClientRect();
            return Math.abs(rect.left - 100) < 10 && Math.abs(rect.top - 100) < 10;
        });
        
        if (newWidget) {
            console.log('‚úÖ Widget creado correctamente en la posici√≥n especificada');
        } else {
            console.log('‚ùå No se encontr√≥ el widget creado en la posici√≥n especificada');
        }
    }, 1000);
}

// Funci√≥n para probar el panel de propiedades
function testPropertyPanel() {
    console.log('üîß Probando panel de propiedades...');
    
    const elements = document.querySelectorAll('.unified-widget-element');
    if (elements.length === 0) {
        console.log('‚ùå No hay elementos para probar');
        return;
    }
    
    const element = elements[0];
    
    // Simular clic para seleccionar el elemento
    const clickEvent = new MouseEvent('click', {
        bubbles: true,
        cancelable: true,
        view: window
    });
    
    element.dispatchEvent(clickEvent);
    
    // Verificar si se muestra el panel de propiedades
    setTimeout(() => {
        const propertyPanel = document.querySelector('.property-panel');
        if (propertyPanel) {
            const isHidden = propertyPanel.classList.contains('hidden');
            console.log(`üìä Panel de propiedades: ${isHidden ? 'oculto' : 'visible'}`);
            
            if (!isHidden) {
                console.log('‚úÖ Panel de propiedades se muestra correctamente');
                
                // Probar actualizaci√≥n de propiedades
                const textInput = propertyPanel.querySelector('input[data-property="text"]');
                if (textInput) {
                    textInput.value = 'Texto de prueba';
                    textInput.dispatchEvent(new Event('input', { bubbles: true }));
                    console.log('‚úÖ Propiedad de texto actualizada');
                }
            } else {
                console.log('‚ùå Panel de propiedades no se muestra');
            }
        } else {
            console.log('‚ùå No se encontr√≥ el panel de propiedades');
        }
    }, 200);
}

// Funci√≥n para probar la deselecci√≥n al hacer clic en el canvas
function testCanvasDeselection() {
    console.log('üéØ Probando deselecci√≥n al hacer clic en el canvas...');
    
    // Primero seleccionar un elemento
    const elements = document.querySelectorAll('.unified-widget-element');
    if (elements.length === 0) {
        console.log('‚ùå No hay elementos para probar');
        return;
    }
    
    const element = elements[0];
    
    // Seleccionar el elemento
    const clickEvent = new MouseEvent('click', {
        bubbles: true,
        cancelable: true,
        view: window
    });
    
    element.dispatchEvent(clickEvent);
    
    // Verificar que est√° seleccionado
    setTimeout(() => {
        const isSelected = element.classList.contains('selected-widget');
        console.log(`üìä Elemento seleccionado: ${isSelected ? 's√≠' : 'no'}`);
        
        if (isSelected) {
            // Simular clic en el canvas
            const canvas = document.querySelector('.unified-canvas') || 
                           document.querySelector('.canvas-container') ||
                           document.querySelector('.phone-content-area');
            
            if (canvas) {
                const canvasClickEvent = new MouseEvent('click', {
                    bubbles: true,
                    cancelable: true,
                    view: window
                });
                
                canvas.dispatchEvent(canvasClickEvent);
                
                // Verificar deselecci√≥n
                setTimeout(() => {
                    const stillSelected = element.classList.contains('selected-widget');
                    console.log(`üìä Elemento despu√©s del clic en canvas: ${stillSelected ? 'seleccionado' : 'deseleccionado'}`);
                    
                    if (!stillSelected) {
                        console.log('‚úÖ Deselecci√≥n al hacer clic en canvas funciona correctamente');
                    } else {
                        console.log('‚ùå PROBLEMA: El elemento no se deseleccion√≥');
                    }
                }, 100);
            } else {
                console.log('‚ùå No se encontr√≥ el canvas');
            }
        } else {
            console.log('‚ùå PROBLEMA: El elemento no se seleccion√≥ inicialmente');
        }
    }, 200);
}

// Funci√≥n principal de prueba
function runPureJavaScriptTest() {
    console.log('üöÄ Ejecutando prueba de funcionalidades en JavaScript puro...');
    
    // Paso 1: Probar sistema de arrastre
    console.log('\nüìã Paso 1: Sistema de arrastre');
    testPureJavaScriptDrag();
    
    // Paso 2: Probar creaci√≥n de widgets
    setTimeout(() => {
        console.log('\nüìã Paso 2: Creaci√≥n de widgets');
        testWidgetCreation();
        
        // Paso 3: Probar panel de propiedades
        setTimeout(() => {
            console.log('\nüìã Paso 3: Panel de propiedades');
            testPropertyPanel();
            
            // Paso 4: Probar deselecci√≥n
            setTimeout(() => {
                console.log('\nüìã Paso 4: Deselecci√≥n en canvas');
                testCanvasDeselection();
                
                console.log('\n‚úÖ Prueba de funcionalidades en JavaScript puro finalizada');
            }, 2000);
        }, 2000);
    }, 3000);
}

// Funci√≥n para verificar la implementaci√≥n
function checkImplementation() {
    console.log('üîç Verificando implementaci√≥n...');
    
    // Verificar que no se usa vue-draggable
    const scripts = document.querySelectorAll('script');
    let usesVueDraggable = false;
    
    scripts.forEach(script => {
        if (script.src && script.src.includes('vue-draggable')) {
            usesVueDraggable = true;
        }
    });
    
    console.log(`üìä Uso de vue-draggable: ${usesVueDraggable ? 's√≠' : 'no'}`);
    
    if (!usesVueDraggable) {
        console.log('‚úÖ Implementaci√≥n usa JavaScript puro');
    } else {
        console.log('‚ö†Ô∏è A√∫n se detecta vue-draggable');
    }
    
    // Verificar event listeners nativos
    const elements = document.querySelectorAll('.unified-widget-element');
    if (elements.length > 0) {
        const element = elements[0];
        console.log('üìä Event listeners del primer elemento:');
        console.log(`   - onmousedown: ${element.onmousedown ? 'presente' : 'ausente'}`);
        console.log(`   - onmousemove: ${element.onmousemove ? 'presente' : 'ausente'}`);
        console.log(`   - onmouseup: ${element.onmouseup ? 'presente' : 'ausente'}`);
    }
}

// Exportar funciones
window.runPureJavaScriptTest = runPureJavaScriptTest;
window.testPureJavaScriptDrag = testPureJavaScriptDrag;
window.testWidgetCreation = testWidgetCreation;
window.testPropertyPanel = testPropertyPanel;
window.testCanvasDeselection = testCanvasDeselection;
window.checkImplementation = checkImplementation;

console.log('üìã Funciones de prueba disponibles:');
console.log('- runPureJavaScriptTest(): Prueba completa de funcionalidades en JS puro');
console.log('- testPureJavaScriptDrag(): Probar sistema de arrastre');
console.log('- testWidgetCreation(): Probar creaci√≥n de widgets');
console.log('- testPropertyPanel(): Probar panel de propiedades');
console.log('- testCanvasDeselection(): Probar deselecci√≥n en canvas');
console.log('- checkImplementation(): Verificar implementaci√≥n');

console.log('üí° Para ejecutar la prueba completa, usa: runPureJavaScriptTest()'); 